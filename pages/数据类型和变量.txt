<h2>数据类型</h2>
<p>
    ECMAScript有5种基本数据类型： Undefined、Null、Boolean、Number、String
                1种复杂类型：     Object.object由一组无序键值对组成
</p>
<h2>
<h2>变量</h2>
<p>ECMAScript的变量是松散型的，可以用来保存任何类型的数据</p>
<pre>var message</pre>
<p>定义了一个名为message的变量，它可以用来保存任何值(现在message未初始化，会保存一个特殊值--undefined)</p>
<p>var操作符定义一个变量，该变量会变成该作用域的局部变量</p>
<pre>function test() {
        var message = "hi"; //局部变量
    }
    test();
    alert(message); //错误
</pre>
<p>因为message在函数中使用var定义的，当函数被调用，就会创建该变量并为其赋值，之后，这个变量
    又会立即被销毁，所有alert(message)错误 ，不用var操作符则可以访问到:
</p>
<pre>
function test() {
    message = "hi"; //全局变量
}
test();
alert(message); //"hi"
</pre>
<p>不要这样使用，全局变量很难维护，在严格模式下也会报错 ReferenceError</p>
<p>可以一条语句定义多个变量</p>
<pre>
    var message = "hi",
        found = false,
        age = 24;
</pre>
<h2>typeof操作符</h2>
<p>
    因为ECMAScript是松散类型的，需要手段知道变量的类型--typeof可以负责提供这方面的信息
    对一个值使用typeof可能返回的值:
</p>
<p>
    "undefined" -- 这个值未定义;
    "boolean" -- 这个值是布尔值;
    "string" -- 这个值是字符串;
    "number" -- 这个值是数字;
    "object" -- 这个值是对象 或 null;
    "function" -- 这个值是函数;
</p>
<pre>
    var message = "some string";
    alert(typeof message);  //"string"
    alert(typeof (message));  //"string"
    alert(typeof 95);         //"number"
</pre>
<p>typeof 是操作符，不是函数。 null被认为是空的对象引用 typeof null 会返回 "object"</p>
<h2>Undefined类型</h2>
<p>在使用var声明变量，但未初始化，这个变量的值则是undefined。</p>
<pre>
    var message;  //声明了取得了undefined值
    //未声明age这个变量
    //var age
    alert(message);    //undefined
    alert(age);        //错误 在严格模式下导致错误

    alert(typeof message); //undefined
</pre>
<h2>Null 类型</h2>

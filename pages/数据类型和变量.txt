<h2>数据类型</h2>
<p>
    ECMAScript有6种基本数据类型： Undefined、Null、Boolean、Number、String、Symbol。<br>
                1种复杂类型：     Object.object由一组无序键值对组成<br>
                Symbol ( 在 ECMAScript 6 中新添加的类型).。一种数据类型，它的实例是唯一且不可改变的。
</p>
<h2>
<h2>变量</h2>
<p>ECMAScript的变量是松散型的，可以用来保存任何类型的数据。</p>
<pre>   var message; </pre>
<pre>   let message; //声明块级作用域的局部变量</pre>
<pre>   const message; //声明只读变量</pre>
<p>定义了一个名为message的变量，它可以用来保存任何值(现在message未初始化，会保存一个特殊值--undefined)</p>
<p>var操作符定义一个变量，该变量会变成该作用域的局部变量</p>
<pre>function test() {
        var message = "hi"; //局部变量
    }
    test();
    alert(message); //错误
</pre>
<p>因为message在函数中使用var定义的，当函数被调用，就会创建该变量并为其赋值，之后，这个变量
    又会立即被销毁，所有alert(message)错误 ，不用var操作符则可以访问到:
</p>
<pre>
function test() {
    message = "hi"; //全局变量
}
test();
alert(message); //"hi"
</pre>
<p>不要这样使用，全局变量很难维护，在严格模式下也会报错 ReferenceError</p>
<p>可以一条语句定义多个变量</p>
<pre>
    var message = "hi",
        found = false,
        age = 24;
</pre>
<br>
<p>可以通过变量名，去访问变量的值。</p>
<p>变量名又叫标识符，需要遵守一定的规则。</p>
<p>变量的值，可以是是 String , Number, Boolean, Array, Object 这五种数据类型。</p>

<h2>运算符</h2>
<p>运算符：根据两个值（变量）做出结果的代数符号</p>
<h3>1. "+"号</h3>
<pre>
    6 + 3;  // 9
    "hello" + 90;  // "hello90"
</pre>
<p>"+" 用来连接连个数字，或者连接两个字符串</p>
<h3>2. 减号，乘号，除号与在数学计算中一样的使用</h3>
<pre>
    9 - 3;
    8 * 2; // JS中的乘是一个"*"号;
    9 / 3;
</pre>
<h3> 3. 赋值号 " = "  </h3>
<pre>
    var myVariable = "Ton";
</pre>
<p>将字符串赋值给变量</p>
<h3>4. 等号 " === ", 不等号 !===</h3>
<pre>
    var myVariable = 3;
    myVariable === 4;  // 返回true / false
    <br>
    var myVariable = 3;
    myVariable !== 3;  // false
</pre>
<h3></h3>
<h3></h3>
<h2>typeof操作符</h2>
<p>
    因为ECMAScript是松散类型的，需要手段知道变量的类型--typeof可以负责提供这方面的信息
    对一个值使用typeof可能返回的值:
</p>
<pre>
    "undefined" -- 这个值未定义;
    "boolean" -- 这个值是布尔值;
    "string" -- 这个值是字符串;
    "number" -- 这个值是数字;
    "object" -- 这个值是对象 或 null;
    "function" -- 这个值是函数;
</pre>
<pre>
    var message = "some string";
    alert(typeof message);  // "string"
    alert(typeof (message));  // "string"
    alert(typeof 95);         // "number"
</pre>
<p>typeof 是操作符，不是函数。 null被认为是空的对象引用 typeof null 会返回 "object"</p>
<h2>Undefined类型</h2>
<p>在使用var声明变量，但未初始化，这个变量的值则是undefined。</p>
<pre>
    var message;  //声明了取得了undefined值
    // 未声明age这个变量
    // var age
    alert(message);    // undefined
    alert(age);        // 错误 在严格模式下导致错误

    alert(typeof message); // undefined
</pre>
<p>undefined使用: </p>
<pre>
    Boolean(undefined);  // false
    Number(undefined);  // NaN  任何与NaN相关的操作都返回NaN
    toString();       // undefined没有toString()方法
</pre>

<h2>Null 类型</h2>
<p>null使用: </p>
<pre>
    Boolean(null);  // false
    Number(null);  // 0
    toString();       // null没有toString()方法
</pre>


<h2>变量的求值</h2>
<pre>
    var a;
    console.log(a);  //undefined;

    console.log(b);  //undefined;

    console.log("The value of c is " + c); //undefined;
    var c;

    console.log("The value of x is " + x);  //undefined;
    let x;
</pre>
<p><strong>访问var, let声明未赋值的变量，或者不存在的变量都返回undefined</strong></p>

